{"version":3,"sources":["Components/Banner.js","Components/Footer.js","Components/Header.js","Components/Block.js","App.js","serviceWorker.js","index.js"],"names":["Banner","react_default","a","createElement","className","Component","Footer","Header","Navbar","color","light","sticky","NavbarBrand","href","Nav","NavItem","NavLink","Block","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","num","toggle","bind","assertThisInitialized","renderBox","setState","lst","i","push","_this2","Button","onClick","App","Components_Header","Components_Banner","Components_Block","Components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d22b646d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../CSS/Banner.css';\n\nclass Banner extends Component {\n  render() {\n    return (\n      <div className=\"root\">\n        <div className=\"background\">\n          <h1 className=\"text\">SMALL TEAM, BIG IMPACT</h1>\n        </div>\n        <div className=\"quote\">\n          <p className=\"quoteText\">We are a digital innovation studio based in Mumbai. We are passionate about building products and services via dynamic technologies to enhance lifestyles.<br/> With values of simplicity and minimalism, we aim to transform the industries we enter!</p>\n          <p className=\"quoteText\">A good teacher can inspire hope, ignite the imagination, and instill a love of learning. <br/> - Brad Henry</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Banner;\n","import React, { Component } from 'react';\nimport '../CSS/Footer.css';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div className=\"footercss\">\n        <p className=\"footertext\">&copy; 2019 STYFI. Created by Abhaya.</p>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { Navbar,NavbarBrand,NavItem,NavLink,Nav } from 'reactstrap';\n//import '../CSS/Header.css';\n\nclass Header extends Component {\n  render() {\n    return (\n        <Navbar color='light' light sticky=\"top\">\n          <NavbarBrand href=\"/\">STYFI</NavbarBrand>\n          <Nav>\n            <NavItem>\n              <NavLink href=\"/\">About</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/\">Team</NavLink>\n            </NavItem>\n          </Nav>\n        </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport '../CSS/Block.css';\nimport { Button } from 'reactstrap';\n\n\nclass Block extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { num: 1 };\n    this.toggle=this.toggle.bind(this);\n    this.renderBox=this.renderBox.bind(this);\n\n  }\n  toggle(num){\n    this.setState({num:num});\n  }\n  renderBox(){\n    let lst=[];\n    for(let i=1;i<=this.state.num;i++){\n      lst.push( <div className=\"box\"><h2 className=\"boxText\">{this.state.num}</h2></div>);\n    }\n    return lst;\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"centerClass\">\n          <Button onClick={()=>{this.toggle(1)}}>One</Button>\n          <Button onClick={()=>{this.toggle(2)}}>Two</Button>\n          <Button onClick={()=>{this.toggle(3)}}>Three</Button>\n        </div>\n        <div className=\"flexClass\">\n          {this.renderBox()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Block;\n","import React, { Component } from 'react';\nimport Banner from './Components/Banner.js';\nimport Footer from './Components/Footer.js';\nimport Header from './Components/Header.js';\nimport Block from './Components/Block.js';\nimport './CSS/Block.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header/>\n        <Banner/>\n        <Block />\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}